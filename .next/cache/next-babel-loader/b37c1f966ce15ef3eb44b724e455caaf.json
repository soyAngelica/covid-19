{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nexport default function useStats(url) {\n  var _useState = useState(),\n      stats = _useState[0],\n      setStats = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  useEffect(function () {\n    function fetchData() {\n      var data;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              setError();\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(url).then(function (res) {\n                return res.json();\n              })[\"catch\"](function (err) {\n                if (typeof err.text === 'function') {\n                  err.text().then(function (errorMessage) {\n                    console.log(\"\".concat(err, \"estupido\"));\n                  });\n                } else {\n                  console.log(err);\n                }\n              }));\n\n            case 4:\n              data = _context.sent;\n              setStats(data);\n              console.log(data);\n              setLoading(false);\n              setError('');\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchData();\n  }, [url]);\n  return {\n    stats: stats,\n    loading: loading,\n    error: error\n  };\n}","map":{"version":3,"sources":["C:/fullstack/covid-19/src/useStats.js"],"names":["useState","useEffect","useStats","url","stats","setStats","loading","setLoading","error","setError","fetchData","fetch","then","res","json","err","text","errorMessage","console","log","data"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AAAA,kBACRH,QAAQ,EADA;AAAA,MAC3BI,KAD2B;AAAA,MACpBC,QADoB;;AAAA,mBAEHL,QAAQ,CAAC,IAAD,CAFL;AAAA,MAE3BM,OAF2B;AAAA,MAElBC,UAFkB;;AAAA,mBAGPP,QAAQ,EAHD;AAAA,MAG3BQ,KAH2B;AAAA,MAGpBC,QAHoB;;AAIlCR,EAAAA,SAAS,CAAC,YAAM;AACZ,aAAeS,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACIH,cAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,cAAAA,QAAQ;AAFZ;AAAA,+CAGuBE,KAAK,CAACR,GAAD,CAAL,CAClBS,IADkB,CACb,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,eADU,WAEX,UAAAC,GAAG,EAAI;AACX,oBAAI,OAAOA,GAAG,CAACC,IAAX,KAAoB,UAAxB,EAAoC;AAClCD,kBAAAA,GAAG,CAACC,IAAJ,GAAWJ,IAAX,CAAgB,UAAAK,YAAY,EAAI;AAC9BC,oBAAAA,OAAO,CAACC,GAAR,WAAeJ,GAAf;AACD,mBAFD;AAGD,iBAJD,MAIO;AACFG,kBAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACJ;AACF,eAVgB,CAHvB;;AAAA;AAGUK,cAAAA,IAHV;AAcIf,cAAAA,QAAQ,CAACe,IAAD,CAAR;AACAF,cAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACAb,cAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,cAAAA,QAAQ,CAAC,EAAD,CAAR;;AAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBAC,IAAAA,SAAS;AACZ,GArBQ,EAqBN,CAACP,GAAD,CArBM,CAAT;AAsBA,SAAO;AACHC,IAAAA,KAAK,EAALA,KADG;AAEHE,IAAAA,OAAO,EAAPA,OAFG;AAGHE,IAAAA,KAAK,EAALA;AAHG,GAAP;AAKH","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\nexport default function useStats(url) {\r\n    const [stats, setStats] = useState();\r\n    const [loading, setLoading]  = useState(true);\r\n    const [error, setError]  = useState();\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            setLoading(true);\r\n            setError();\r\n            const data = await fetch(url)\r\n            .then(res => res.json())\r\n            .catch( err => {\r\n                if (typeof err.text === 'function') {\r\n                  err.text().then(errorMessage => {\r\n                    console.log(`${err}estupido`)\r\n                  });\r\n                } else {\r\n                     console.log(err)\r\n                }\r\n              } )\r\n            setStats(data);\r\n            console.log(data)\r\n            setLoading(false);\r\n            setError('');\r\n        }\r\n        fetchData();\r\n    }, [url]);\r\n    return {\r\n        stats,\r\n        loading,\r\n        error,\r\n    }; \r\n}\r\n"]},"metadata":{},"sourceType":"module"}